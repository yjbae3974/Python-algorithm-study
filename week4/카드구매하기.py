N = int(input())
arr = list(map(int, input().split()))
dp = [0 for _ in range(N+1)]

# dp 알고리즘. 큰 문제를 최대한 여러개의 작은 문제로 나눈다.
# dp[i]에는 해당 수의 카드를 구매할 때 어느정도의 값을 내야하는지를 나타낸다.
#예를 들어, dp[2]는 카드가 1개, 2개 들어가 있는 팩이 있고, 경우의 수는 2가지다. 1개를 2개 사거나, 2개를 1개 사거나.
#1개를 2개 사기: dp[1] + arr[0](여기서 arr값은 1 작아진다.) 2개를 1개 사기: dp[0] + arr[1]

#헷갈릴만 하니 이번엔 dp[3]을 보자. 경우의 수가 조금 더 많아진다. dp[2], 즉 카드 2개를 살 때의 최댓값 + arr[0],
#카드 1개를 살 때 최댓값과 카드 2개짜리 값을 더한 dp[1] + arr[1], 마지막으로  그냥 카드 3개짜리를 사는 경우인 dp[0] + arr[2]이다.

#위 과정을 for문을 이용해 반복할 수 있다. 이를 통해 dp값을 계속 업데이트하며, 최종적으로 dp[N]값을 구한다.

for i in range(1, N+1):
    for j in range(1, i+1):
        dp[i] = max(dp[i], dp[i-j]+arr[j-1])
print(dp[N])